/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AMM, AMMInterface } from "../../contracts/AMM";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_GOV_Address",
        type: "address",
      },
      {
        internalType: "address",
        name: "_AssetA_Address",
        type: "address",
      },
      {
        internalType: "address",
        name: "_AssetB_Address",
        type: "address",
      },
      {
        internalType: "address",
        name: "_Liquidity_Address",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AssetA_Address",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "AssetB_Address",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GOV_Address",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee_value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_gov_value",
        type: "uint256",
      },
    ],
    name: "GOV_Trading_fees",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "GOV_Trading_fees_remove_vote",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "Liquidity_Address",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "accumulatedfees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fee_value",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "liquidityA",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "liquidityB",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "proposedFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "proposedFeeGOVBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposedFeeGOVTotalBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amountB",
        type: "uint256",
      },
    ],
    name: "provideLiquidity",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "removeLiquidity",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountA",
        type: "uint256",
      },
    ],
    name: "tradeA2B",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountA",
        type: "uint256",
      },
    ],
    name: "tradeAmountA2B",
    outputs: [
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountB",
        type: "uint256",
      },
    ],
    name: "tradeAmountB2A",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountB",
        type: "uint256",
      },
    ],
    name: "tradeB2A",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001cc938038062001cc9833981810160405281019062000037919062000174565b836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060048190555060006005819055506103e8600781905550505050506200022e565b6000815190506200016e8162000214565b92915050565b600080600080608085870312156200018b57600080fd5b60006200019b878288016200015d565b9450506020620001ae878288016200015d565b9350506040620001c1878288016200015d565b9250506060620001d4878288016200015d565b91505092959194509250565b6000620001ed82620001f4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200021f81620001e0565b81146200022b57600080fd5b50565b611a8b806200023e6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806379629b69116100ad5780639ecbe2f6116100715780639ecbe2f61461035a578063e3f0109814610378578063e796002c14610396578063f6bd6f23146103b4578063f6df3d16146103d257610121565b806379629b691461028e5780637a16af7f146102ac5780638aff885d146102dc57806398ce9ab6146102fa5780639c8f9f231461032a57610121565b80632e97341f116100f45780632e97341f146101c2578063359de305146101f25780633650fafb1461022257806348cc3818146102405780634ec0f4241461025e57610121565b80630874e15b1461012657806324731cff1461015657806327a0c9dc146101745780632d190e8014610192575b600080fd5b610140600480360381019061013b919061173b565b610402565b60405161014d919061181f565b60405180910390f35b61015e6106cf565b60405161016b919061183a565b60405180910390f35b61017c6106d5565b60405161018991906117a4565b60405180910390f35b6101ac60048036038101906101a791906116e9565b6106fb565b6040516101b9919061181f565b60405180910390f35b6101dc60048036038101906101d791906116e9565b6108ac565b6040516101e9919061183a565b60405180910390f35b61020c60048036038101906102079190611697565b6108db565b604051610219919061183a565b60405180910390f35b61022a6108f3565b604051610237919061183a565b60405180910390f35b6102486108f9565b604051610255919061183a565b60405180910390f35b610278600480360381019061027391906116e9565b6108ff565b604051610285919061183a565b60405180910390f35b61029661092e565b6040516102a3919061183a565b60405180910390f35b6102c660048036038101906102c1919061173b565b610934565b6040516102d3919061181f565b60405180910390f35b6102e4610d1a565b6040516102f191906117a4565b60405180910390f35b610314600480360381019061030f9190611697565b610d40565b604051610321919061183a565b60405180910390f35b610344600480360381019061033f91906116e9565b610d58565b604051610351919061181f565b60405180910390f35b610362611054565b60405161036f919061183a565b60405180910390f35b61038061105a565b60405161038d91906117a4565b60405180910390f35b61039e611080565b6040516103ab91906117a4565b60405180910390f35b6103bc6110a4565b6040516103c9919061181f565b60405180910390f35b6103ec60048036038101906103e791906116e9565b611418565b6040516103f9919061181f565b60405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161046391906117a4565b60206040518083038186803b15801561047b57600080fd5b505afa15801561048f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b39190611712565b116104bd57600080fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000851180156104f35750600084115b6104fc57600080fd5b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561054e5761054c6110a4565b505b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161058b939291906117bf565b602060405180830381600087803b1580156105a557600080fd5b505af11580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd91906116c0565b5083600a546105ec9190611855565b84866105f891906118dc565b600a5460075461060891906118dc565b6106129190611855565b61061c91906118ab565b60078190555083600a60008282546106349190611855565b9250508190555084600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019250505092915050565b60055481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610787939291906117bf565b602060405180830381600087803b1580156107a157600080fd5b505af11580156107b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d991906116c0565b506000846004546107ea9190611855565b600554866107f891906118dc565b61080291906118ab565b9050600554811061081257600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161084d9291906117f6565b602060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f91906116c0565b5060019350505050919050565b6000816005546108bc9190611855565b600454836108ca91906118dc565b6108d491906118ab565b9050919050565b60086020528060005260406000206000915090505481565b60065481565b600a5481565b60008160045461090f9190611855565b6005548361091d91906118dc565b61092791906118ab565b9050919050565b60045481565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b81526004016109e7939291906117bf565b602060405180830381600087803b158015610a0157600080fd5b505af1158015610a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3991906116c0565b508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401610a77939291906117bf565b602060405180830381600087803b158015610a9157600080fd5b505af1158015610aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac991906116c0565b5060008173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1257600080fd5b505afa158015610b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4a9190611712565b90506000600454118015610b6057506000600554115b15610c595760006004548289610b7691906118dc565b610b8091906118ab565b905060006005548389610b9391906118dc565b610b9d91906118ab565b90508860046000828254610bb19190611855565b925050819055508760056000828254610bca9190611855565b925050819055506000818311610be05782610be2565b815b90508473ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610c1f9291906117f6565b600060405180830381600087803b158015610c3957600080fd5b505af1158015610c4d573d6000803e3d6000fd5b50505050505050610d0c565b8660046000828254610c6b9190611855565b925050819055508560056000828254610c849190611855565b925050819055508173ffffffffffffffffffffffffffffffffffffffff166340c10f1933610cbc898b610cb791906118dc565b6115c9565b6040518363ffffffff1660e01b8152600401610cd99291906117f6565b600060405180830381600087803b158015610cf357600080fd5b505af1158015610d07573d6000803e3d6000fd5b505050505b600194505050505092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096020528060005260406000206000915090505481565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1657600080fd5b505afa158015610e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4e9190611712565b905060008160045488610e6191906118dc565b610e6b91906118ab565b905060008260055489610e7e91906118dc565b610e8891906118ab565b90508160046000828254610e9c9190611936565b925050819055508060056000828254610eb59190611936565b925050819055508373ffffffffffffffffffffffffffffffffffffffff16639dc29fac338a6040518363ffffffff1660e01b8152600401610ef79291906117f6565b600060405180830381600087803b158015610f1157600080fd5b505af1158015610f25573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610f649291906117f6565b602060405180830381600087803b158015610f7e57600080fd5b505af1158015610f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb691906116c0565b508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610ff29291906117f6565b602060405180830381600087803b15801561100c57600080fd5b505af1158015611020573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104491906116c0565b5060019650505050505050919050565b60075481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161110591906117a4565b60206040518083038186803b15801561111d57600080fd5b505afa158015611131573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111559190611712565b1161115f57600080fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116111d157600080fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080600a546112679190611936565b818361127391906118dc565b600a5460075461128391906118dc565b61128d9190611936565b61129791906118ab565b600781905550600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a60008282546112ee9190611936565b925050819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016113ba9291906117f6565b602060405180830381600087803b1580156113d457600080fd5b505af11580156113e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140c91906116c0565b50600194505050505090565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016114a4939291906117bf565b602060405180830381600087803b1580156114be57600080fd5b505af11580156114d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f691906116c0565b506000846005546115079190611855565b6004548661151591906118dc565b61151f91906118ab565b9050600454811061152f57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161156a9291906117f6565b602060405180830381600087803b15801561158457600080fd5b505af1158015611598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bc91906116c0565b5060019350505050919050565b6000600382111561163057819050600060016002846115e891906118ab565b6115f29190611855565b90505b8181101561162a57809150600281828561160f91906118ab565b6116199190611855565b61162391906118ab565b90506115f5565b5061163e565b6000821461163d57600190505b5b919050565b60008135905061165281611a10565b92915050565b60008151905061166781611a27565b92915050565b60008135905061167c81611a3e565b92915050565b60008151905061169181611a3e565b92915050565b6000602082840312156116a957600080fd5b60006116b784828501611643565b91505092915050565b6000602082840312156116d257600080fd5b60006116e084828501611658565b91505092915050565b6000602082840312156116fb57600080fd5b60006117098482850161166d565b91505092915050565b60006020828403121561172457600080fd5b600061173284828501611682565b91505092915050565b6000806040838503121561174e57600080fd5b600061175c8582860161166d565b925050602061176d8582860161166d565b9150509250929050565b6117808161196a565b82525050565b61178f8161197c565b82525050565b61179e816119a8565b82525050565b60006020820190506117b96000830184611777565b92915050565b60006060820190506117d46000830186611777565b6117e16020830185611777565b6117ee6040830184611795565b949350505050565b600060408201905061180b6000830185611777565b6118186020830184611795565b9392505050565b60006020820190506118346000830184611786565b92915050565b600060208201905061184f6000830184611795565b92915050565b6000611860826119a8565b915061186b836119a8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118a05761189f6119b2565b5b828201905092915050565b60006118b6826119a8565b91506118c1836119a8565b9250826118d1576118d06119e1565b5b828204905092915050565b60006118e7826119a8565b91506118f2836119a8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561192b5761192a6119b2565b5b828202905092915050565b6000611941826119a8565b915061194c836119a8565b92508282101561195f5761195e6119b2565b5b828203905092915050565b600061197582611988565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b611a198161196a565b8114611a2457600080fd5b50565b611a308161197c565b8114611a3b57600080fd5b50565b611a47816119a8565b8114611a5257600080fd5b5056fea264697066735822122059183c619adb768754fdc32ca72b4ab49852624d040598271577ce78a369376064736f6c63430008040033";

type AMMConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AMMConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AMM__factory extends ContractFactory {
  constructor(...args: AMMConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _GOV_Address: string,
    _AssetA_Address: string,
    _AssetB_Address: string,
    _Liquidity_Address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AMM> {
    return super.deploy(
      _GOV_Address,
      _AssetA_Address,
      _AssetB_Address,
      _Liquidity_Address,
      overrides || {}
    ) as Promise<AMM>;
  }
  override getDeployTransaction(
    _GOV_Address: string,
    _AssetA_Address: string,
    _AssetB_Address: string,
    _Liquidity_Address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _GOV_Address,
      _AssetA_Address,
      _AssetB_Address,
      _Liquidity_Address,
      overrides || {}
    );
  }
  override attach(address: string): AMM {
    return super.attach(address) as AMM;
  }
  override connect(signer: Signer): AMM__factory {
    return super.connect(signer) as AMM__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AMMInterface {
    return new utils.Interface(_abi) as AMMInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): AMM {
    return new Contract(address, _abi, signerOrProvider) as AMM;
  }
}
